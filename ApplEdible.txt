/mnt/c/Users/yangw57/Desktop/pikca4/java /mnt/c/Users/yangw57/Desktop/pikca4
(grammarSpec (grammarDecl (grammarType grammar) (identifier ApplEdible) ;) (prequelConstruct (tokensSpec tokens { (idList (identifier STUDY_ID)) })) (prequelConstruct (action_ @ (actionScopeName parser) :: (identifier members) (actionBlock { \n S t r i n g   s t u d y I d ; \n p u b l i c   A p p l P a r s e r ( T o k e n S t r e a m   i n p u t ,   S t r i n g   s t u d y I d )   { \n         t h i s ( i n p u t ) ; \n         t h i s . s t u d y I d   =   s t u d y I d ; \n         } }))) (rules (ruleSpec (parserRuleSpec prog (argActionBlock [ S t r i n g   d o m V a r ]) : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref suite)) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec suite : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref header)) (ebnfSuffix ?)) (element (atom (ruleref only_when)) (ebnfSuffix ?)) (element (atom (ruleref only_where)) (ebnfSuffix ?)) (element (atom (ruleref stmt)) (ebnfSuffix +)) (element (atom (ruleref tailer)) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref simple_stmt)))) | (alternative (element (atom (ruleref compound_stmt))))) )))) (element (atom (terminal '.')) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec simple_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal SET))) (element (atom (terminal CDISC_DOMAIN_VARIABLE)) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'to')))) | (alternative (element (atom (terminal 'as'))) (element (atom (terminal 'following:')) (ebnfSuffix ?)))) )))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref expr_rhs))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal SET))) (element (atom (terminal CDISC_DOMAIN_VARIABLE)) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'to')))) | (alternative (element (atom (terminal 'as'))) (element (atom (terminal 'following:')) (ebnfSuffix ?)))) )))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref expr_rhs))) (element (atom (terminal ',')) (ebnfSuffix ?)) (element (atom (terminal IF))) (element (atom (ruleref condition_list))) (element (ebnf (block ( (altList (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')))) | (alternative (element (atom (terminal '.'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ELSE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal SET))) (element (atom (terminal CDISC_DOMAIN_VARIABLE)) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'to')))) | (alternative (element (atom (terminal 'as'))) (element (atom (terminal 'following:')) (ebnfSuffix ?)))) )))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref expr_rhs))) (element (atom (terminal ',')) (ebnfSuffix ?)) (element (atom (terminal IF))) (element (atom (ruleref condition_list))))) )) (blockSuffix (ebnfSuffix *)))) (element (ebnf (block ( (altList (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')))) | (alternative (element (atom (terminal '.'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ELSE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal SET))) (element (atom (terminal CDISC_DOMAIN_VARIABLE)) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'to')))) | (alternative (element (atom (terminal 'as'))) (element (atom (terminal 'following:')) (ebnfSuffix ?)))) )))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref expr_rhs))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (ruleref if_stmt))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'do')))) | (alternative (element (atom (terminal 'Do'))))) )))) (element (atom (terminal 'nothing'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec only_when : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHEN))) (element (atom (terminal CDISC_DOMAIN_VARIABLE))) (element (atom (ruleref comp_op))) (element (atom (ruleref val_string))) (element (atom (terminal '.'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec only_where : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHERE))) (element (atom (ruleref condition_list))) (element (atom (terminal '.'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec compound_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IF))) (element (atom (ruleref condition_list))) (element (ebnf (block ( (altList (alternative (element (atom (terminal THEN)))) | (alternative (element (atom (terminal ','))))) )))) (element (atom (ruleref simple_stmt))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (terminal SET))) (element (atom (terminal 'to'))) (element (atom (ruleref extractor)) (ebnfSuffix ?)) (element (atom (ruleref picker))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'in'))) (element (atom (ruleref order_op))) (element (atom (terminal 'order'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref group_member_))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec group_member_ : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '('))) (element (atom (terminal NUMBER))) (element (atom (terminal ')'))) (element (atom (ruleref simple_stmt))) (element (atom (terminal '.')) (ebnfSuffix ?)) (element (atom (ruleref tailer)) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec if_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IF))) (element (atom (ruleref condition_list))) (element (atom (terminal ',')) (ebnfSuffix ?)) (element (atom (terminal THEN)) (ebnfSuffix ?)) (element (atom (ruleref simple_stmt))) (element (ebnf (block ( (altList (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')))) | (alternative (element (atom (terminal '.'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ELSE))) (element (atom (ruleref if_stmt))))) )) (blockSuffix (ebnfSuffix *)))) (element (ebnf (block ( (altList (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')))) | (alternative (element (atom (terminal '.'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ELSE))) (element (atom (ruleref simple_stmt))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec if_impute_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IF))) (element (atom (ruleref condition_list))) (element (atom (terminal ',')) (ebnfSuffix ?)) (element (atom (terminal THEN)) (ebnfSuffix ?)) (element (atom (terminal IMPUTE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DATE_UNIT)))) | (alternative (element (atom (terminal TIME_UNIT))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal WITH))) (element (atom (ruleref expr_imputation))) (element (atom (terminal '.')) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec condition_list : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref condition))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')) (ebnfSuffix ?)) (element (atom (ruleref venn_op))) (element (atom (ruleref condition))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec condition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '('))) (element (atom (ruleref condition_list))) (element (atom (terminal ')'))))) | (labeledAlt (alternative (element (atom (ruleref selective_test))))) | (labeledAlt (alternative (element (atom (ruleref quantified_test))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec selective_test : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref selective_test))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref venn_op))) (element (atom (ruleref comp_op))) (element (atom (ruleref expr_rhs))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref comp_op))) (element (atom (ruleref expr_rhs))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref comp_op))) (element (atom (ruleref partial_term))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref comp_op))) (element (atom (ruleref expr_rhs))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'per'))) (element (atom (ruleref peror))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'per'))) (element (atom (ruleref peror))))) )) (blockSuffix (ebnfSuffix +)))) (element (atom (ruleref comp_op))) (element (atom (ruleref expr_rhs))))) | (labeledAlt (alternative (element (atom (ruleref reflective_test))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec reflective_test : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref self_expr))) (element (atom (ruleref comp_op))) (element (atom (ruleref expr_rhs))))) | (labeledAlt (alternative (element (atom (ruleref self_expr))) (element (atom (ruleref comp_op))) (element (atom (ruleref partial_term))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec quantified_test : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'there'))) (element (atom (terminal BE))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal 'at'))) (element (atom (terminal 'most'))) (element (atom (ruleref val_number))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)) (element (atom (ruleref rear_selector))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'there'))) (element (atom (terminal BE))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal 'at'))) (element (atom (terminal 'least'))) (element (atom (ruleref val_number))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)) (element (atom (ruleref rear_selector))))) | (labeledAlt (alternative (element (atom (terminal 'all'))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)) (element (atom (ruleref rear_selector))))) | (labeledAlt (alternative (element (atom (terminal 'any'))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)) (element (atom (ruleref rear_selector))))) | (labeledAlt (alternative (element (atom (terminal 'there')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'exists')))) | (alternative (element (atom (terminal 'exist'))))) )))) (element (atom (ruleref rear_selector))))) | (labeledAlt (alternative (element (atom (ruleref front_selector))) (element (atom (terminal 'any'))) (element (atom (terminal CDISC_DOMAIN))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (ruleref front_selector))) (element (atom (terminal 'all'))) (element (atom (terminal CDISC_DOMAIN))) (element (atom (terminal OBSERVATION)) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec rear_selector : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'from')))) | (alternative (element (atom (terminal 'in'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal CDISC_DOMAIN))) (element (ebnf (block ( (altList (alternative (element (atom (terminal WHERE))) (element (atom (ruleref selective_test))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (ruleref selective_test))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec front_selector : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref selective_test))) (element (atom (terminal 'for'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec peror : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal CDISC_DOMAIN_VARIABLE))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'subject')))) | (alternative (element (atom (terminal 'patient'))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec self_expr : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref extractor))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec expr_rhs : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '('))) (element (atom (ruleref expr_rhs))) (element (atom (terminal ')'))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))))) | (labeledAlt (alternative (element (atom (ruleref prim_expr))))) | (labeledAlt (alternative (element (atom (ruleref exprlist))))) | (labeledAlt (alternative (element (atom (ruleref term))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec expr_imputation : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref val_time))))) | (labeledAlt (alternative (element (atom (ruleref val_number))))) | (labeledAlt (alternative (element (atom (ruleref val_month))))) | (labeledAlt (alternative (element (atom (ruleref val_date))))) | (labeledAlt (alternative (element (atom (ruleref expr_rhs))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec exprlist : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref prim_expr))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ','))) (element (atom (ruleref prim_expr))))) )) (blockSuffix (ebnfSuffix *)))))) | (labeledAlt (alternative (element (atom (terminal '['))) (element (atom (ruleref exprlist))) (element (atom (terminal ']'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prim_expr : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref prim_expr))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref calc_op))) (element (atom (ruleref prim_expr))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (ruleref val_number))))) | (labeledAlt (alternative (element (atom (ruleref val_string))))) | (labeledAlt (alternative (element (atom (terminal 'True'))))) | (labeledAlt (alternative (element (atom (terminal 'False'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec term : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref val_month))))) | (labeledAlt (alternative (element (atom (terminal 'None'))))) | (labeledAlt (alternative (element (atom (terminal 'NULL'))))) | (labeledAlt (alternative (element (atom (terminal 'null'))))) | (labeledAlt (alternative (element (atom (terminal 'blank'))))) | (labeledAlt (alternative (element (atom (terminal 'empty'))))) | (labeledAlt (alternative (element (atom (terminal 'missing'))))) | (labeledAlt (alternative (element (atom (terminal 'nonmissing'))))) | (labeledAlt (alternative (element (atom (terminal 'non-missing'))))) | (labeledAlt (alternative (element (atom (terminal USER_DEFINED))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec partial_term : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'a')) (ebnfSuffix ?)) (element (atom (terminal 'complete'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'date')))) | (alternative (element (atom (terminal 'dates'))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (terminal 'a')) (ebnfSuffix ?)) (element (atom (terminal 'partial'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'date')))) | (alternative (element (atom (terminal 'dates'))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (terminal 'a')) (ebnfSuffix ?)) (element (atom (terminal 'complete'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'datetime')))) | (alternative (element (atom (terminal 'datetimes')))) | (alternative (element (atom (terminal 'date time'))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (terminal 'a')) (ebnfSuffix ?)) (element (atom (terminal 'partial'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'datetime')))) | (alternative (element (atom (terminal 'datetimes')))) | (alternative (element (atom (terminal 'date time'))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec comp_op : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '='))))) | (labeledAlt (alternative (element (atom (terminal '=='))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'equal'))) (element (atom (terminal 'to'))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'equal'))) (element (atom (terminal 'to'))))) | (labeledAlt (alternative (element (atom (terminal 'equals'))) (element (atom (terminal 'to')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'Equals'))))) | (labeledAlt (alternative (element (atom (terminal '<'))))) | (labeledAlt (alternative (element (atom (terminal '>'))))) | (labeledAlt (alternative (element (atom (terminal '>='))))) | (labeledAlt (alternative (element (atom (terminal '<='))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'less'))) (element (atom (terminal 'than'))) (element (atom (terminal OP_OR))) (element (atom (terminal 'equal'))) (element (atom (terminal 'to'))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'greater'))) (element (atom (terminal 'than'))) (element (atom (terminal OP_OR))) (element (atom (terminal 'equal'))) (element (atom (terminal 'to'))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'equal'))) (element (atom (terminal 'to'))) (element (atom (terminal OP_OR))) (element (atom (terminal 'greater'))) (element (atom (terminal 'than'))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'less'))) (element (atom (terminal 'than'))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'greater'))) (element (atom (terminal 'than'))))) | (labeledAlt (alternative (element (atom (terminal '!='))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'not'))) (element (atom (terminal 'equal'))) (element (atom (terminal 'to')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'not'))) (element (atom (terminal 'equals'))) (element (atom (terminal 'to')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'ne'))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (atom (terminal 'not'))) (element (atom (terminal 'earlier'))) (element (atom (terminal 'than'))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (atom (terminal 'not'))) (element (atom (terminal 'later'))) (element (atom (terminal 'than'))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (atom (terminal 'not'))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (atom (terminal 'after'))))) | (labeledAlt (alternative (element (atom (terminal BE))) (element (atom (terminal 'before'))))) | (labeledAlt (alternative (element (atom (terminal OP_CONTAINS))))) | (labeledAlt (alternative (element (atom (terminal OP_STARTS_WITH))))) | (labeledAlt (alternative (element (atom (terminal OP_HAS))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'values')))) | (alternative (element (atom (terminal 'value'))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'in'))))) | (labeledAlt (alternative (element (atom (terminal BE)) (ebnfSuffix ?)) (element (atom (terminal 'not'))) (element (atom (terminal 'in'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec venn_op : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal OP_AND))))) | (labeledAlt (alternative (element (atom (terminal OP_OR))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec agger : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'number'))) (element (atom (terminal 'of'))) (element (atom (terminal 'unique'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'number'))) (element (atom (terminal 'of'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'total')) (ebnfSuffix ?)) (element (atom (terminal 'number'))) (element (atom (terminal 'of'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'total')) (ebnfSuffix ?)) (element (atom (terminal 'count'))) (element (atom (terminal 'of'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'largest'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'maximum'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'minimum'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'first'))) (element (atom (terminal 'difference'))) (element (atom (terminal 'of'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'sum'))) (element (atom (terminal 'of'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec picker : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref picker))) (element (atom (ruleref picker))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'first'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'last'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'most'))) (element (atom (terminal 'recent'))))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'latest'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'earliest'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'earlier'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec order_op : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'asc')))) | (alternative (element (atom (terminal 'ascending'))))) )))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'dsc')))) | (alternative (element (atom (terminal 'decending'))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec calc_op : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '+'))))) | (labeledAlt (alternative (element (atom (terminal '-'))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal '–')))) | (alternative (element (atom (terminal 'minus'))))) )))))) | (labeledAlt (alternative (element (atom (terminal '*'))))) | (labeledAlt (alternative (element (atom (terminal '/'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec sel_expr : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal '('))) (element (atom (ruleref sel_expr))) (element (atom (terminal ')'))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (ebnf (block ( (altList (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ',')))) | (alternative (element (atom (terminal OP_AND))))) )))) (element (atom (ruleref sel_expr))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref transformer))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (terminal WHERE))) (element (atom (ruleref condition_list))))) | (labeledAlt (alternative (element (atom (ruleref picker))) (element (atom (ruleref sel_expr))) (element (atom (terminal 'when')) (ebnfSuffix ?)) (element (atom (terminal 'sorted'))) (element (atom (terminal 'in'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'date/time')))) | (alternative (element (atom (terminal 'chronological'))))) )))) (element (atom (terminal 'order'))))) | (labeledAlt (alternative (element (atom (ruleref picker))) (element (atom (ruleref sel_expr))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ORDER_BY))) (element (atom (ruleref selection))) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'in'))) (element (atom (ruleref order_op))) (element (atom (terminal 'order'))))) )) (blockSuffix (ebnfSuffix ?)))))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (ruleref extractor))) (element (atom (ruleref sel_expr))))) | (labeledAlt (alternative (element (atom (ruleref agger))) (element (atom (ruleref sel_expr))))) | (labeledAlt (alternative (element (atom (ruleref selection))))) | (labeledAlt (alternative (element (atom (terminal SUPP_DOMAIN_VARIABLE))) (element (atom (terminal WHERE))) (element (atom (terminal SUPP_DOMAIN_VARIABLE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BE)))) | (alternative (element (atom (terminal '='))))) )))) (element (atom (ruleref val_string))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref calc_op))) (element (atom (ruleref sel_expr))))) | (labeledAlt (alternative (element (atom (ruleref sel_expr))) (element (atom (ruleref calc_op))) (element (atom (ruleref expr_rhs))))) | (labeledAlt (alternative (element (atom (ruleref prim_expr))) (element (atom (ruleref calc_op))) (element (atom (ruleref sel_expr))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec selection : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal CDISC_DOMAIN_VARIABLE))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec extractor : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'date')))) | (alternative (element (atom (terminal 'Date'))))) )))) (element (atom (terminal 'part')) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'datepart'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'datetime'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'day'))) (element (atom (terminal 'part')) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'month'))) (element (atom (terminal 'part')) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'time'))) (element (atom (terminal 'part')) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'hour'))) (element (atom (terminal 'part')))) | (alternative (element (atom (terminal 'hours')))) | (alternative (element (atom (terminal 'hour'))))) )))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'minute'))) (element (atom (terminal 'part')))) | (alternative (element (atom (terminal 'minutes')))) | (alternative (element (atom (terminal 'minute'))))) )))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'second'))) (element (atom (terminal 'part')))) | (alternative (element (atom (terminal 'seconds')))) | (alternative (element (atom (terminal 'second'))))) )))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'cycle'))) (element (atom (terminal 'number')) (ebnfSuffix ?)) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'cycle'))) (element (atom (terminal 'day'))) (element (atom (terminal 'of')) (ebnfSuffix ?)))) | (labeledAlt (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (atom (terminal 'integer'))) (element (atom (terminal 'part'))) (element (atom (terminal 'of'))))) | (labeledAlt (alternative (element (atom (terminal 'the'))) (element (atom (terminal 'part'))) (element (atom (terminal 'after'))) (element (atom (terminal STRING)) (ebnfSuffix +)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'in')))) | (alternative (element (atom (terminal 'of'))))) )))))) | (labeledAlt (alternative (element (atom (terminal 'the'))) (element (atom (terminal 'part'))) (element (atom (terminal 'before'))) (element (atom (terminal STRING)) (ebnfSuffix +)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'in')))) | (alternative (element (atom (terminal 'of'))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec transformer : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref converter))))) | (labeledAlt (alternative (element (atom (terminal 'upcase'))))) | (labeledAlt (alternative (element (atom (terminal 'uppercase'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec converter : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'converted'))) (element (atom (terminal 'to'))) (element (atom (terminal 'numeric'))) (element (atom (terminal 'date'))))) | (labeledAlt (alternative (element (atom (terminal 'converted'))) (element (atom (terminal 'to'))) (element (atom (terminal 'numeric'))) (element (atom (terminal 'datetime'))))) | (labeledAlt (alternative (element (atom (terminal 'converted'))) (element (atom (terminal 'to'))) (element (atom (terminal 'character'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec val_string : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'the')) (ebnfSuffix ?)) (element (ebnf (block ( (altList (alternative (element (atom (terminal 'text')))) | (alternative (element (atom (terminal 'texts'))))) )))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal STRING)) (ebnfSuffix +)))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec val_date : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal DATE))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec val_time : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal TIME))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec val_number : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal NUMBER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec val_month : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'January'))))) | (labeledAlt (alternative (element (atom (terminal 'Feburary'))))) | (labeledAlt (alternative (element (atom (terminal 'March'))))) | (labeledAlt (alternative (element (atom (terminal 'April'))))) | (labeledAlt (alternative (element (atom (terminal 'May'))))) | (labeledAlt (alternative (element (atom (terminal 'June'))))) | (labeledAlt (alternative (element (atom (terminal 'July'))))) | (labeledAlt (alternative (element (atom (terminal 'August'))))) | (labeledAlt (alternative (element (atom (terminal 'September'))))) | (labeledAlt (alternative (element (atom (terminal 'October'))))) | (labeledAlt (alternative (element (atom (terminal 'November'))))) | (labeledAlt (alternative (element (atom (terminal 'December'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec header : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'Option'))) (element (atom (notSet ~ (setElement ':'))) (ebnfSuffix *)) (element (atom (terminal ':'))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec tailer : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal 'Missing'))) (element (atom (terminal 'Data'))) (element (atom (terminal 'Handling'))) (element (atom (terminal 'Rule'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHERE))) (element (atom (ruleref reflective_test))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ':'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal '-')) (ebnfSuffix ?)) (element (atom (ruleref tailer_item))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (atom (terminal 'Preprocessing'))) (element (atom (terminal 'imputation'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHERE))) (element (atom (ruleref condition_list))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ':'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal '-')) (ebnfSuffix ?)) (element (atom (ruleref tailer_item))))) )) (blockSuffix (ebnfSuffix +)))))) | (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal 'Imputation')))) | (alternative (element (atom (terminal 'Imputation'))) (element (atom (terminal 'rules'))))) )))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHERE))) (element (atom (ruleref reflective_test))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal ':'))) (element (ebnf (block ( (altList (alternative (element (atom (terminal '-')) (ebnfSuffix ?)) (element (atom (ruleref tailer_item))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec tailer_item : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ONLY))) (element (atom (terminal WHERE))) (element (atom (ruleref condition_list))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref if_impute_stmt))) (element (atom (terminal '.')) (ebnfSuffix ?)))))) ; exceptionGroup)) (ruleSpec (lexerRuleSpec OP_CONTAINS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'contains'))))))) ;)) (ruleSpec (lexerRuleSpec OP_STARTS_WITH : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'starts with'))))))) ;)) (ruleSpec (lexerRuleSpec OP_HAS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'has'))))))) ;)) (ruleSpec (lexerRuleSpec OP_AND : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'and'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'And'))))))) ;)) (ruleSpec (lexerRuleSpec OP_OR : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'or'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Or'))))))) ;)) (ruleSpec (lexerRuleSpec DATE_UNIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'day'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'month'))))))) ;)) (ruleSpec (lexerRuleSpec TIME_UNIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal TIME_HOUR_UNIT))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal TIME_MINUTE_UNIT))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal TIME_SECOND_UNIT))))))) ;)) (ruleSpec (lexerRuleSpec fragment TIME_HOUR_UNIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'hour'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'hours'))))))) ;)) (ruleSpec (lexerRuleSpec fragment TIME_MINUTE_UNIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'minute'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'minutes'))))))) ;)) (ruleSpec (lexerRuleSpec fragment TIME_SECOND_UNIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'second'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'seconds'))))))) ;)) (ruleSpec (lexerRuleSpec SUPP_DOMAIN_VARIABLE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'S'))) (lexerElement (lexerAtom (terminal 'U'))) (lexerElement (lexerAtom (terminal 'P'))) (lexerElement (lexerAtom (terminal 'P'))) (lexerElement (lexerAtom (terminal CDISC_DOMAIN))) (lexerElement (lexerAtom (terminal '.'))) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_START))) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_START))) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_CONTINUE)) (ebnfSuffix +)))))) ;)) (ruleSpec (lexerRuleSpec CDISC_DOMAIN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER))) (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN_LETTER)))))) )) (ebnfSuffix ?))))) )) (ebnfSuffix ?))))) )) (ebnfSuffix ?))))) )) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec CDISC_DOMAIN_VARIABLE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '[')) (ebnfSuffix ?)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal CDISC_DOMAIN))) (lexerElement (lexerAtom (terminal '.')))))) )) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_START))) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_START))) (lexerElement (lexerAtom (terminal CDISC_VARIABLE_CONTINUE)) (ebnfSuffix +)) (lexerElement (lexerAtom (terminal ']')) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec STRING : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\''))) (lexerElement (lexerAtom (notSet ~ (setElement [\\\r\n\f']))) (ebnfSuffix *)) (lexerElement (lexerAtom (terminal '\''))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '"'))) (lexerElement (lexerAtom (notSet ~ (setElement [\\\r\n\f"]))) (ebnfSuffix *)) (lexerElement (lexerAtom (terminal '"'))))))) ;)) (ruleSpec (lexerRuleSpec fragment INTEGER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal NON_ZERO_DIGIT))) (lexerElement (lexerAtom (terminal DIGIT)) (ebnfSuffix *)))))) ;)) (ruleSpec (lexerRuleSpec fragment FLOAT_NUMBER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal POINT_FLOAT))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal EXPONENT_FLOAT))))))) ;)) (ruleSpec (lexerRuleSpec NUMBER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal INTEGER))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal FLOAT_NUMBER))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal NUMBER_ONE))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal NUMBER_ZERO))))))) ;)) (ruleSpec (lexerRuleSpec fragment NUMBER_ONE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'one'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'One'))))))) ;)) (ruleSpec (lexerRuleSpec fragment NUMBER_ZERO : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [0])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'zero'))))))) ;)) (ruleSpec (lexerRuleSpec TIME : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT))) (lexerElement (lexerAtom (terminal DIGIT))) (lexerElement (lexerAtom (terminal ':'))) (lexerElement (lexerAtom (terminal DIGIT))) (lexerElement (lexerAtom (terminal DIGIT))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ':'))) (lexerElement (lexerAtom (terminal DIGIT))) (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec DATE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [012])) (lexerElement (lexerAtom (terminal DIGIT))))))) ;)) (ruleSpec (lexerRuleSpec WHITESPACE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ' '))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\t')))))) )) (ebnfSuffix +))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec NEWLINE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\r')) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal '\n'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\r')))))) )) (ebnfSuffix +))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec COMMENT_BLOCK : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '/*'))) (lexerElement (lexerAtom .) (ebnfSuffix * ?)) (lexerElement (lexerAtom (terminal '*/')))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec COMMENT_LINE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '//'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'NOTE:')))))) ))) (lexerElement (lexerAtom (notSet ~ (setElement [\r\n\f]))) (ebnfSuffix *))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec COMMENT_PARTIAL : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '#'))) (lexerElement (lexerAtom (notSet ~ (setElement [\r\n\f#]))) (ebnfSuffix *)) (lexerElement (lexerAtom (terminal '#')) (ebnfSuffix ?))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec STUDY_SPECIFIC : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Study specific'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'study specific')))))) ))) (lexerElement (lexerAtom (terminal '.')) (ebnfSuffix ?))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec USER_DEFINED : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'user'))) (lexerElement (lexerAtom (terminal 'defined'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'User'))) (lexerElement (lexerAtom (terminal 'defined'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'user-defined'))))))) ;)) (ruleSpec (lexerRuleSpec MISC : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Please')))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec SEMICOLON : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ';')))) (lexerCommands -> (lexerCommand (lexerCommandName (identifier skip))))))) ;)) (ruleSpec (lexerRuleSpec IF : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'if'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'If'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'In case'))) (lexerElement (lexerAtom (terminal 'of')) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec THEN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'then'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Then'))))))) ;)) (ruleSpec (lexerRuleSpec ELSE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'else'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Else'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'otherwise'))) (lexerElement (lexerAtom (terminal ',')) (ebnfSuffix ?)))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Otherwise'))) (lexerElement (lexerAtom (terminal ',')) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec SET : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'set'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Set'))))))) ;)) (ruleSpec (lexerRuleSpec IMPUTE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'impute'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Impute'))))))) ;)) (ruleSpec (lexerRuleSpec BE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'is'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'are'))))))) ;)) (ruleSpec (lexerRuleSpec TO : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'to'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'To'))))))) ;)) (ruleSpec (lexerRuleSpec AS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'as'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'As'))))))) ;)) (ruleSpec (lexerRuleSpec WITH : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'with'))))))) ;)) (ruleSpec (lexerRuleSpec WHERE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'where'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Where'))))))) ;)) (ruleSpec (lexerRuleSpec OBSERVATION : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'observation'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'observations'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'record'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'records'))))))) ;)) (ruleSpec (lexerRuleSpec ONLY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'Only'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'only'))))))) ;)) (ruleSpec (lexerRuleSpec WHEN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'when'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'When'))))))) ;)) (ruleSpec (lexerRuleSpec ORDER_BY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'order by'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'sorted by'))))))) ;)) (ruleSpec (lexerRuleSpec NAME : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ID_START))) (lexerElement (lexerAtom (terminal ID_CONTINUE)) (ebnfSuffix *)))))) ;)) (ruleSpec (lexerRuleSpec fragment CDISC_DOMAIN_LETTER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Lu}])))))) ;)) (ruleSpec (lexerRuleSpec fragment CDISC_DOMAIN_ITEM_LETTER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Ll}])))))) ;)) (ruleSpec (lexerRuleSpec fragment CDISC_VARIABLE_START : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [A-Z])))))) ;)) (ruleSpec (lexerRuleSpec fragment CDISC_VARIABLE_CONTINUE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Letter}])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT))))))) ;)) (ruleSpec (lexerRuleSpec fragment NON_ZERO_DIGIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [1-9])))))) ;)) (ruleSpec (lexerRuleSpec fragment DIGIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [0-9])))))) ;)) (ruleSpec (lexerRuleSpec fragment POINT_FLOAT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal INT_PART)) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal FRACTION))))))) ;)) (ruleSpec (lexerRuleSpec fragment INT_PART : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)) (ebnfSuffix +)))))) ;)) (ruleSpec (lexerRuleSpec fragment FRACTION : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '.'))) (lexerElement (lexerAtom (terminal DIGIT)) (ebnfSuffix +)))))) ;)) (ruleSpec (lexerRuleSpec fragment EXPONENT_FLOAT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal INT_PART))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal POINT_FLOAT)))))) ))) (lexerElement (lexerAtom (terminal EXPONENT))))))) ;)) (ruleSpec (lexerRuleSpec fragment EXPONENT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [eE^])) (lexerElement (lexerAtom [+-]) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal DIGIT)) (ebnfSuffix +)))))) ;)) (ruleSpec (lexerRuleSpec fragment ID_START : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Lu}])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{N}])))))) ;)) (ruleSpec (lexerRuleSpec fragment ID_CONTINUE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ID_START))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Mn}])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Mc}])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Nd}])))) | (lexerAlt (lexerElements (lexerElement (lexerAtom [\p{Pc}])))))) ;))) <EOF>)
/mnt/c/Users/yangw57/Desktop/pikca4
